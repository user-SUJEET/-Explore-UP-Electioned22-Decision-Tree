# -*- coding: utf-8 -*-
"""Explore UP Electioned22 Decision Tree

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vyEL82JpXcvCVyQwC8No29kYY38_T189
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

df=pd.read_csv("/content/sample_data/up_res.csv..csv")

df

df.isnull().sum()

df['district']

df['district'].shape

df.shape

df.info()

df.tail()

df.head()

df['district'].unique()

df.hist(figsize=(10,10))
plt.show()

df['party'].unique()

df.columns

df.describe().T

df.boxplot(column=['votes'])

df.boxplot(column=['votes'])
df.boxplot(column=['votes'])

sns.pairplot(df)
plt.show()

df.duplicated().sum()

df.duplicated()

df.info()

df['district'].unique()

df.columns

from sklearn.model_selection import train_test_split

tips = sns.load_dataset('district')

# Create a scatter plot
plt.figure(figsize=(6, 4))
sns.scatterplot(x= 'party', y='district', data=tips, hue='time', style='time')
plt.title('votes')
plt.xlabel('candidate')
plt.ylabel('district')
plt.show()

sns.distplot(df['votes'])
plt.show()

sns.distplot(df['candidate'],kde=False)
plt.show()



df.info()

df.describe()

from sklearn.model_selection import train_test_split

X = df.drop('district', axis=1)
y = df['district']



X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

y_train.shape

X_test.shape

y_test.shape

from sklearn.tree import DecisionTreeClassifier

lo = DecisionTreeClassifier()

lo





"""# Task
Explain the error in the selected code. If possible, fix the error and incorporate the changes into the existing code. Otherwise, try to diagnose the error.

## Identify categorical columns

### Subtask:
Identify the columns in the DataFrame that have the `object` data type.

**Reasoning**:
Use the `.info()` method to inspect the data types of the columns in the DataFrame.
"""

df.info()

"""## Apply one-hot encoding

### Subtask:
Use pandas' `get_dummies` function to perform one-hot encoding on the identified categorical columns.

**Reasoning**:
Apply one-hot encoding to the specified categorical columns and overwrite the original DataFrame.
"""

df = pd.get_dummies(df, columns=['seat_allotment', 'ac', 'candidate', 'party'])

"""## Split the data

### Subtask:
Split the one-hot encoded data into training and testing sets.

**Reasoning**:
Split the one-hot encoded data into training and testing sets according to the instructions.
"""

X = df.drop('district', axis=1)
y = df['district']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Train the model

### Subtask:
Train the `DecisionTreeClassifier` model on the training data.

**Reasoning**:
Train the DecisionTreeClassifier model using the training data.
"""

lo.fit(X_train,y_train)

"""## Evaluate the model

### Subtask:
Evaluate the performance of the trained model using appropriate metrics.

**Reasoning**:
Make predictions on the test set and evaluate the model's performance using accuracy.
"""

y_pred = lo.predict(X_test)
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')

"""## Summary:

### Data Analysis Key Findings

*   The columns 'seat\_allotment', 'ac', 'district', 'candidate', and 'party' were identified as categorical variables with the 'object' data type.
*   One-hot encoding was applied to the 'seat\_allotment', 'ac', 'candidate', and 'party' columns.
*   The data was split into training and testing sets, with 80% for training and 20% for testing.
*   A `DecisionTreeClassifier` model was trained on the training data.
*   The trained model achieved an accuracy of 1.0 on the test set.

### Insights or Next Steps

*   An accuracy of 1.0 might indicate overfitting. Further investigation using cross-validation or evaluating on an independent dataset could provide a more robust assessment of the model's performance.
*   Explore other classification algorithms and compare their performance to the `DecisionTreeClassifier`.

"""